#!/bin/bash

# We have to be the superuser
if [ $(whoami) != "root" ]; then
    echo "ERROR: This script must be run as the superuser (root)"
    exit 1
fi

if [ ! $# -lt 1 ]; then
    echo "This command needs one parameter"
    echo "    Domain name of certificate"
    exit 1
fi


echo 
echo "This script will import a (lets encrypt) certificate for a webserver on this "
echo "machine such that it can be used by polaric-aprsd. " 
echo
echo "The domain name is: $1 "
echo
echo "It assumes that the certificate have been issued automatically using certbot, etc.. " 
echo "It will create a new Java keystore for polaric-aprsd. Any existing keystore will  "
echo "be overwritten. "
echo
read -p "Do you want to continue? [Y/n]" -n 1 -r

if [[ $REPLY =~ ^[^Yy]$ ]]
then
    exit 0
fi

CERTDIR=/etc/letsencrypt/live/$1
KSDIR=/etc/polaric-aprsd/keys
INIFILE=/etc/polaric-aprsd/server.ini

echo
if [[ ! -d "$CERTDIR" ]] ; then 
    echo "ERROR: Directory '$CERTDIR' does not exist. "
    exit 1
fi
if [[ ! -d "$KSDIR" ]]; then
    mkdir $KSDIR 
fi
if [[ -e __keystore.jks ]] ; then 
    rm __keystore.jks
fi


#
# Generate a 16 character random password
#
 PASSWD=$(< /dev/urandom tr -dc [:alnum:] | head -c16)
DPASSWD=$(< /dev/urandom tr -dc [:alnum:] | head -c16)


#
# If necesssary, add lines to config file
#
polaric-insertline $INIFILE 'httpserver\.port' 'httpserver\.secure.*' 'httpserver.secure = false'
polaric-insertline $INIFILE 'httpserver\.secure' 'httpserver\.keystore\.pw.*' 'httpserver.keystore.pw = password'

# 
# Set password in ini file
#
sed -i -E "s/httpserver\.keystore\.pw( )+=( )+.*/httpserver\.keystore\.pw = $DPASSWD/g" $INIFILE


#
# Put the key and the cert in a PKCS#12 file
#
openssl pkcs12 -export -in $CERTDIR/fullchain.pem -inkey $CERTDIR/privkey.pem -out __pkcs.p12 \
        -passout "pass:$PASSWD" -name letsencrypt

#
# Import it into the Java keystore
#
keytool -importkeystore -destkeystore __keystore.jks -srckeystore __pkcs.p12 \
        -srcstoretype PKCS12 -srcstorepass "$PASSWD" -deststorepass "$DPASSWD" -alias letsencrypt
     
     
if [[ -e $KSDIR/keystore.jks ]] ; then 
    mv $KSDIR/keystore.jks $KSDIR/keystore.jks.bak
fi
mv __keystore.jks $KSDIR/keystore.jks
rm __pkcs.p12


